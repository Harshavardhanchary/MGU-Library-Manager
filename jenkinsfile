pipeline {
    agent any

    environment {
        // Load secure values from Jenkins credentials
        MYSQL_ROOT_PASSWORD = credentials('MYSQL_ROOT_PASSWORD')  // From Jenkins credential ID
        MYSQL_DATABASE = credentials('MYSQL_DATABASE')// Replace or use Jenkins credentials
        MYSQL_USER = credentials('MYSQL_USER')
        DB_URL = credentials('DB_URL')
        MYSQL_PASSWORD = credentials('MYSQL_PASSWORD')
        DB_PASSWORD = credentials('DB_PASSWORD')
        DB_USERNAME = credentials('DB_USERNAME')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(
                    branches: [[name: '*/main']],
                    extensions: [],
                    userRemoteConfigs: [[url: 'https://github.com/Harshavardhanchary/MGU-Library-Manager.git']]
                    )
                    echo 'Checkout successful'
            }
        }

        stage('Prepare .env File') {
            steps {
                script {
                    writeFile file: '.env', text: """\
MYSQL_ROOT_PASSWORD=${env.MYSQL_ROOT_PASSWORD}
MYSQL_DATABASE=${env.MYSQL_DATABASE}
MYSQL_USER=${env.MYSQL_USER}
DB_URL=${env.DB_URL}
MYSQL_PASSWORD=${env.MYSQL_PASSWORD}
DB_PASSWORD=${env.DB_PASSWORD}
DB_URL=jdbc:mysql://db:3306/${env.MYSQL_DATABASE}
DB_USERNAME=${env.DB_USERNAME}
""".stripIndent()
                }
                echo "‚úÖ .env file created successfully"
            }
        }

        stage('Build and Start Services') {
            steps {
                echo "üõ†Ô∏è Building Docker containers..."
                sh 'echo "----- DEBUG: Printing .env content -----" && cat .env'
                sh 'docker system prune -f'
                sh 'docker-compose build'
                sh 'docker-compose up -d'
                echo 'build complete'
                echo 'build complete'
            }
        }

        stage('ps') {
            steps {
                echo 'docker build complete'
                echo "docker running procesess"
                sh 'docker ps'
                sh 'docker ps -a'
            }
        }
        stage('Test Docker Login') {
            steps {
                withCredentials([
                    usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')
                ]) {
                    script {
                        echo "Logging into Docker Hub as $DOCKER_USER..."
                        sh """
                            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        """
                        echo "Docker login successful ‚úÖ"
                    }
                }
            }
        }
    }
}

